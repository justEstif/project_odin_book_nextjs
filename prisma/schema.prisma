generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id    String @id @default(cuid())
  name  String @default("")
  image String @default("")
  bio   String @default("")
  user  User[]
}

model User {
  id String @id @default(cuid())

  // mandatory user profile
  // TODO: Should this be changed?
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  // auth
  email         String    @unique
  emailVerified DateTime?

  // date
  createdAt DateTime @default(now())

  // posts
  posts      Post[] @relation("Posts")
  likedPosts Post[] @relation("LikedPosts")

  // comments
  comments      Comment[] @relation("Comments")
  likedComments Comment[] @relation("LikedComments")

  // received requests
  sentRequests     User[] @relation("Requests")
  receivedRequests User[] @relation("Requests")

  // friends
  friends   User[] @relation("Friends")
  friendsOf User[] @relation("Friends")

  // User Account: a user can have multiple accounts
  accounts Account[]
  sessions Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model Post {
  id String @id @default(cuid())

  // date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // post content
  content String
  // TODO: content type

  // user
  user   User   @relation("Posts", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // likes
  likes User[] @relation("LikedPosts")

  // comments
  comments Comment[] @relation("Comments")
}

model Comment {
  id      String @id @default(cuid())
  content String

  // date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // post
  post   Post   @relation("Comments", fields: [postId], references: [id], onDelete: Cascade)
  postId String

  // user
  user   User   @relation("Comments", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // likes
  likes User[] @relation("LikedComments")

  // comment to comment relation
  parentComment   Comment?  @relation("CommentParentsComment", fields: [parentCommentId], references: [id])
  parentCommentId String?
  childComments   Comment[] @relation("CommentParentsComment")
}

// Information about OAuth accounts associated with a user
model Account {
  id   String @id @default(cuid())
  type String

  provider          String
  providerAccountId String

  refresh_token String? @db.Text
  access_token  String? @db.Text

  expires_at Int?
  token_type String?

  scope    String?
  id_token String? @db.Text

  session_state String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

// store tokens for passwordless sign in
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
